{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","helper.js","serviceWorker.js","index.js"],"names":["Square","value","onClick","style","className","Board","squares","map","square","i","key","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXixNext","winner","lines","length","a","b","c","calculateWinner","xO","historyPoint","slice","current","_step","move","destination","step","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uLAEA,IAWeA,EAXA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QACdC,EAAQF,EAAK,kBAAcA,GAAd,UAGpB,OACI,4BAAQG,UAAWD,EAAOD,QAASA,GAC9BD,ICIEI,EATD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASJ,EAAZ,EAAYA,QAAZ,OACV,yBAAKE,UAAU,SACVE,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACT,kBAAC,EAAD,CAAQC,IAAKD,EAAGR,MAAOO,EAAQN,QAAS,kBAAMA,EAAQO,WCgDnDE,EAlDF,WAAO,IAAD,EACeC,mBAAS,CAACC,MAAM,GAAGC,KAAK,QADvC,mBACRC,EADQ,KACCC,EADD,OAEqBJ,mBAAS,GAF9B,mBAERK,EAFQ,KAEIC,EAFJ,OAGeN,oBAAS,GAHxB,mBAGRO,EAHQ,KAGCC,EAHD,KAITC,ECRH,SAAyBf,GAY5B,IAXA,IAAMgB,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGHb,EAAE,EAAGA,EAAGa,EAAMC,OAAQd,IAAK,CAAC,IAAD,cACba,EAAMb,GADO,GACxBe,EADwB,KACrBC,EADqB,KAClBC,EADkB,KAE/B,GAAGpB,EAAQkB,IAAMlB,EAAQkB,KAAOlB,EAAQmB,IAAMnB,EAAQkB,KAAOlB,EAAQoB,GACjE,OAAOpB,EAAQkB,GAIvB,OAAO,KDXQG,CAAgBZ,EAAQE,IACjCW,EAAKT,EAAU,IAAM,IA8B3B,OACI,oCACI,8DACA,kBAAC,EAAD,CAAOb,QAASS,EAAQE,GAAaf,QA/BzB,SAACO,GACjB,IAAMoB,EAAed,EAAQe,MAAM,EAAGb,EAAa,GAC7Cc,EAAUF,EAAaZ,GACvBX,EAAO,YAAOyB,GAEjBV,GAAUf,EAAQG,KAErBH,EAAQG,GAAKmB,EACbZ,EAAW,GAAD,mBAAKa,GAAL,CAAmBvB,KAC7BY,EAAcW,EAAaN,QAC3BH,GAAYD,OAsBR,yBAAKf,UAAU,gBACX,6BACA,uCAhBcW,EAAQR,KAAI,SAACyB,EAAOC,GAC1C,IAAMC,EAAcD,EAAI,qBAAiBA,GAAS,eAElD,OACI,wBAAIvB,IAAKuB,GACL,4BAAQ/B,QAAS,kBATzBgB,EADYiB,EAU0BF,QARtCb,EAAWe,EAAO,IAAM,GAFb,IAACA,IAUkCD,QActC,4BAAKb,EAAS,UAAWA,EAAS,gBAAiBO,MEpC/CQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACDC,SAASC,eAAe,SD2HnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9a6a3824.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Square = ({ value, onClick}) => {\r\n    const  style = value ? `squares ${value}` : `squares`;\r\n\r\n\r\n    return (\r\n        <button className={style} onClick={onClick}>\r\n            {value}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Square;","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nconst Board = ({ squares, onClick }) => (\r\n    <div className=\"board\">\r\n        {squares.map((square, i) => (\r\n            <Square key={i} value={square} onClick={() => onClick(i)} />\r\n        ))}\r\n  </div>\r\n);\r\n\r\n\r\nexport default Board;","import React, {useState} from 'react';\r\nimport { calculateWinner } from '../helper'\r\nimport Board from './Board'\r\n\r\nconst Game = () => {\r\n    const [history, setHistory] = useState([Array(9).fill(null)]);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [xIsNext, setXixNext] = useState(true);\r\n    const winner = calculateWinner(history[stepNumber]);\r\n    const xO = xIsNext ? \"X\" : \"O\";\r\n\r\n    const handleClick = (i) => {\r\n        const historyPoint = history.slice(0, stepNumber + 1);\r\n        const current = historyPoint[stepNumber];\r\n        const squares = [...current];\r\n        // return is won or occupied \r\n        if(winner || squares[i]) return;\r\n        // select squares \r\n        squares[i] = xO;\r\n        setHistory([...historyPoint, squares]);\r\n        setStepNumber(historyPoint.length)\r\n        setXixNext(!xIsNext);\r\n    };\r\n\r\n    const jumpTo = (step) => {\r\n        setStepNumber(step);\r\n        setXixNext(step % 2 === 0); \r\n    };\r\n\r\n    const renderMoves = () => history.map((_step, move) => {\r\n        const destination = move ? `Go to move ${move}` : \"Got to start\";\r\n\r\n        return(\r\n            <li key={move}>\r\n                <button onClick={() => jumpTo(move)}>{destination}</button>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <h1>REact Tic Tac Toe - with hooks</h1>\r\n            <Board squares={history[stepNumber]} onClick={handleClick} />\r\n            <div className=\"info-wrapper\">\r\n                <div>\r\n                <h3>History</h3>\r\n                {renderMoves()}\r\n                </div>\r\n                <h3>{winner ? \"Winner:\" +winner : \"Next Player: \" +xO }</h3>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Game;","export function calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [5, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n\r\n    for(let i=0; i< lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n\r\n    return null;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Game />, \n document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}